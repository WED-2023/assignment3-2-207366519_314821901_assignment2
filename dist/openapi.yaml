openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
  # local:
  - url: "http://127.0.0.1:3000"
    # remote:
    # - url: "http://132.72.65.211"
    description: SwaggerHub API Auto Mocking hey
tags:
- name: auth
  description: All authentication related routes
- name: receipe
  description: Everything about receipes
- name: user
  description: Operations about user
- name: meal
  description: Operations about meals
paths:
  /Register:
    post:
      tags:
      - auth
      summary: Create a new user account
      description: Register a new user to the system
      operationId: createUser
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: user created successfully
        "400":
          description: "invalid input, object invalid"
        "409":
          description: user already exist
  /Login:
    post:
      tags:
      - auth
      summary: Log in a user
      description: Authenticate user and return session cookie
      operationId: loginUser
      requestBody:
        description: User credentials for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User logged in successfully. The session ID is returned in a cookie named `session`.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: invalid username or password
  /Logout:
    post:
      tags:
      - auth
      summary: Log out a user
      description: Logout a user from the system and delete session cookie
      responses:
        "200":
          description: user logged out successfully
  /recipes/search:
    get:
      tags:
      - receipe
      summary: get receipes from the server
      description: "By passing in the appropriate options, you can get \navailable receipes in the system\n"
      operationId: getRecipeByText
      parameters:
      - name: number
        in: query
        description: Number of desired recipes to return
        required: true
        schema:
          type: integer
          default: 5
          example: 5
          enum:
          - 5
          - 10
          - 15
      - name: query
        in: query
        description: Text to search for matching recipes
        required: true
        schema:
          type: string
          example: pasta
      # - name: cuisine
      #   in: query
      #   description: Filter recipes by one or more cuisine types (comma-separated)
      #   required: false
      #   style: form
      #   explode: false
      #   schema:
      #     type: array
      #     example:
      #     - Italian
      #     - Greek
      #     items:
      #       type: string
      #       enum:
      #       - African
      #       - Asian
      #       - American
      #       - British
      #       - Cajun
      #       - Caribbean
      #       - Chinese
      #       - Eastern European
      #       - European
      #       - French
      #       - German
      #       - Greek
      #       - Indian
      #       - Irish
      #       - Italian
      #       - Japanese
      #       - Jewish
      #       - Korean
      #       - Latin American
      #       - Mediterranean
      #       - Mexican
      #       - Middle Eastern
      #       - Nordic
      #       - Southern
      #       - Spanish
      #       - Thai
      #       - Vietnamese
      # - name: diet
      #   in: query
      #   description: Filter recipes by one or more diet types (comma-separated)
      #   required: false
      #   style: form
      #   explode: false
      #   schema:
      #     type: array
      #     example:
      #     - vegetarian
      #     - vegan
      #     items:
      #       type: string
      #       enum:
      #       - gluten free
      #       - ketogenic
      #       - vegetarian
      #       - lacto-vegetarian
      #       - ovo-vegetarian
      #       - vegan
      #       - pescetarian
      #       - paleo
      #       - primal
      #       - low FODMAP
      #       - whole30
      # - name: intolerances
      #   in: query
      #   description: Filter recipes by one or more intolerances (comma-separated)
      #   required: false
      #   style: form
      #   explode: false
      #   schema:
      #     type: array
      #     example:
      #     - gluten
      #     - peanut
      #     - dairy
      #     items:
      #       type: string
      #       enum:
      #       - dairy
      #       - egg
      #       - gluten
      #       - grain
      #       - peanut
      #       - seafood
      #       - sesame
      #       - shellfish
      #       - soy
      #       - sulfite
      #       - tree nut
      #       - wheat
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "400":
          description: bad input parameter
  /recipes/addRecipe:
    post:
      tags:
      - receipe
      summary: Add a new receipe to the website.
      description: Add a new receipe to the website.
      operationId: addReceipe
      requestBody:
        description: Receipe added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Receipe'
      responses:
        "201":
          description: receipe created successfully
        "400":
          description: "invalid input, object invalid"
  /recipes/random:
    get:
      tags:
      - receipe
      summary: Get random recipes
      description: Get a random selection of recipes from the external API (Spoonacular)
      operationId: getRandomRecipes
      parameters:
      - name: number
        in: query
        description: Number of random recipes to return
        required: false
        schema:
          type: integer
          default: 3
          example: 3
      responses:
        "200":
          description: Random recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: internal server error
        "500":
          description: External API error or server error
  /recipes/searchById/{recipeId}:
    get:
      tags:
      - receipe
      summary: Get detailed recipe information
      description: Get comprehensive information about a specific recipe from external API (Spoonacular)
      operationId: getRecipeInformation
      parameters:
      - name: recipeId
        in: path
        description: The ID of the recipe to get information for
        required: true
        schema:
          type: integer
          example: 716429
      - name: includeNutrition
        in: query
        description: Whether to include nutrition information
        required: false
        schema:
          type: boolean
          default: false
          example: false
      responses:
        "200":
          description: Detailed recipe information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipe'
        "400":
          description: Invalid recipe ID format
        "404":
          description: Recipe not found
        "500":
          description: External API error or server error
  /fav_receipes:
    get:
      tags:
      - user
      - receipe
      summary: Get a user's favorite recipes.
      description: Retrieve the list of recipes that the user has marked as favorites.
      operationId: getFavReceipes
      responses:
        "200":
          description: Successfully retrieved favorite recipes.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: "Unauthorized, invalid session or missing session"
        "404":
          description: No favorite recipes found for the user
      security:
        - cookieAuth: []
    post:
      tags:
      - user
      - receipe
      summary: Add a recipe to user's favorites.
      description: Add a recipe to the user's list of favorite recipes.
      operationId: addFavReceipe
      requestBody:
        description: Recipe to add to favorites
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/fav_receipes_body'
        required: true
      responses:
        "201":
          description: Recipe successfully added to favorites.
        "400":
          description: Invalid input data
        "401":
          description: "Unauthorized, invalid session or missing session"
        "404":
          description: Recipe not found
        "409":
          description: Duplicate receipe on favorite list
      security:
        - cookieAuth: []
  /family_receipes:
    get:
      tags:
      - receipe
      - user
      summary: Get family recipes.
      description: Retrieve the list of family recipes shared within the community. Requires login (session).
      operationId: getFamilyReceipes
      responses:
        "200":
          description: List of family recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: Unauthorized (missing or invalid session)
      security:
        - cookieAuth: []
    post:
      tags:
      - receipe
      summary: Add a new recipe to the family recipes.
      description: Add a new family recipe. Requires login (session).
      operationId: addFamilyReceipe
      requestBody:
        description: Family recipe to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Receipe'
        required: true
      responses:
        "201":
          description: Family recipe created successfully
        "400":
          description: "Invalid input, object invalid"
        "401":
          description: Unauthorized (missing or invalid session)
      security:
        - cookieAuth: []
  /receipe/{id}/like:
    post:
      tags:
      - receipe
      - user
      summary: Like a recipe.
      description: Add a like to a recipe by a user.
      operationId: likeReceipe
      parameters:
      - name: id
        in: path
        description: ID of the recipe to like
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Recipe liked successfully
        "400":
          description: Invalid recipe ID
        "401":
          description: Unauthorized (missing or invalid session)
        "404":
          description: Recipe not found
      security:
        - cookieAuth: []
    delete:
      tags:
      - receipe
      summary: Unlike a recipe.
      description: Remove a like from a recipe by a user.
      operationId: unlikeReceipe
      parameters:
      - name: id
        in: path
        description: ID of the recipe to unlike
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Recipe unliked successfully
        "400":
          description: Invalid recipe ID
        "401":
          description: Unauthorized (missing or invalid session)
        "404":
          description: Recipe not found
      security:
        - cookieAuth: []
  /recipes/addToViewRecipe:
    post:
      tags:
        - receipe
      summary: Record a user's recipe view
      description: Records the viewing of a recipe by a user and maintains only their 3 most recent viewed recipes.
      operationId: viewRecipe
      requestBody:
        description: Information about the viewed recipe
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                  example: 123
                recipeId:
                  type: integer
                  example: 101
                internalRecipe:
                  type: boolean
                  example: true
              required:
                - userId
                - recipeId
                - internalRecipe
      responses:
        "200":
          description: Recipe view recorded.
        "400":
          description: Invalid input, object invalid
        "500":
          description: Server error while recording recipe view
components:
  schemas:
    Receipe:
      required:
      - summary
      - glutenFree
      - image
      - extendedIngredients
      - instructions
      - title
      - readyInMinutes
      - servings
      - vegan
      - sourceName
      - vegetarian
      type: object
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: Spaghetti Bolognese
        image:
          type: string
          format: URL
          example: https://example.com/images/spaghetti.jpg
        readyInMinutes:
          type: integer
          example: 30
        servings:
          type: integer
          example: 4
        vegetarian:
          type: boolean
          example: false
        vegan:
          type: boolean
          example: false
        glutenFree:
          type: string
          example: false
        summary:
          type: string
          example: A classic Italian pasta dish with a rich meat sauce.
        extendedIngredients:
          type: array
          description: List of ingredients with quantities
          example:
          - 200g spaghetti
          - 300g ground beef
          - 1 cup tomato sauce
          - "1 onion, chopped"
          - "2 cloves garlic, minced"
          items:
            type: string
        instructions:
          type: string
          description: Step-by-step preparation instructions
          example:
            type: string
            example: Cook spaghetti according to package instructions.
        sourceName:
          type: string
          description: The user who created or added the recipe to the family collection.
          example: user101
        popularity:
          type: integer
          description: The number of likes the recipe has
          example: 100
    User:
      required:
      - country
      - email
      - firstname
      - lastname
      - password
      - username
      type: object
      properties:
        id:
          type: integer
          format: string
          example: 101
        username:
          type: string
          example: Acef_
        firstname:
          type: string
          example: asaf
        lastname:
          type: string
          example: baroch
        email:
          type: string
          format: email
          example: asaf@example.com
        password:
          type: string
          format: password
          example: "123"
        country:
          type: string
          format: country
          example: Israel
    fav_receipes_body:
      required:
      - recipeId
      type: object
      properties:
        recipeId:
          type: string
          description: The ID of the recipe to add to favorites
          example: "10"
    LoginScheme:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
          format: email
          example: asaf@example.com
        password:
          type: string
          format: password
          example: "123"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session