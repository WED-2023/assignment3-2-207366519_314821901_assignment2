openapi: 3.0.0
info:
  title: Recipes api
  description: API for recipes project
  version: 1.0.1
servers:
  # local:
  - url: "http://127.0.0.1:3000"
    # remote:
    # - url: "http://132.72.65.211"
    description: SwaggerHub API Auto Mocking hey
tags:
- name: auth
  description: All authentication related routes
- name: receipe
  description: Everything about receipes
- name: user
  description: Operations about user
- name: meal
  description: Operations about meals
paths:
  /Register:
    post:
      tags:
      - auth
      summary: Create a new user account
      description: Register a new user to the system
      operationId: createUser
      requestBody:
        description: User to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: user created successfully
        "400":
          description: "invalid input, object invalid"
        "409":
          description: user already exist
  /Login:
    post:
      tags:
      - auth
      summary: Log in a user
      description: Authenticate user and return session cookie
      operationId: loginUser
      requestBody:
        description: User credentials for login
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginScheme'
        required: true
      responses:
        "200":
          description: |
            User logged in successfully. The session ID is returned in a cookie named `session`.
          headers:
            Set-Cookie:
              style: simple
              explode: false
              schema:
                type: string
                example: session=87s97sdhgf279293f8w0e9
        "401":
          description: invalid username or password
  /Logout:
    post:
      tags:
      - auth
      summary: Log out a user
      description: Logout a user from the system and delete session cookie
      responses:
        "200":
          description: user logged out successfully

  /recipes/search:
    get:
      tags:
      - receipe
      summary: get receipes from the server
      description: "By passing in the appropriate options, you can get \navailable receipes in the system\n"
      operationId: getRecipeByText
      parameters:
      - name: number
        in: query
        description: Number of desired recipes to return
        required: true
        schema:
          type: integer
          default: 5
          example: 5
          enum:
          - 5
          - 10
          - 15
      - name: query
        in: query
        description: Text to search for matching recipes
        required: true
        schema:
          type: string
          example: pasta
      - name: cuisine
        in: query
        description: Filter recipes by one or more cuisine types (comma-separated)
        required: false
        style: form
        explode: false
        schema:
          type: array
          example:
          - Italian
          - Greek
          items:
            type: string
            enum:
            - African
            - Asian
            - American
            - British
            - Cajun
            - Caribbean
            - Chinese
            - Eastern European
            - European
            - French
            - German
            - Greek
            - Indian
            - Irish
            - Italian
            - Japanese
            - Jewish
            - Korean
            - Latin American
            - Mediterranean
            - Mexican
            - Middle Eastern
            - Nordic
            - Southern
            - Spanish
            - Thai
            - Vietnamese
      - name: diet
        in: query
        description: Filter recipes by one or more diet types (comma-separated)
        required: false
        style: form
        explode: false
        schema:
          type: array
          example:
          - vegetarian
          - vegan
          items:
            type: string
            enum:
            - gluten free
            - ketogenic
            - vegetarian
            - lacto-vegetarian
            - ovo-vegetarian
            - vegan
            - pescetarian
            - paleo
            - primal
            - low FODMAP
            - whole30
      - name: intolerances
        in: query
        description: Filter recipes by one or more intolerances (comma-separated)
        required: false
        style: form
        explode: false
        schema:
          type: array
          example:
          - gluten
          - peanut
          - dairy
          items:
            type: string
            enum:
            - dairy
            - egg
            - gluten
            - grain
            - peanut
            - seafood
            - sesame
            - shellfish
            - soy
            - sulfite
            - tree nut
            - wheat
      responses:
        "200":
          description: search results matching criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "400":
          description: bad input parameter
  /users/RecipeDB:
    post:
      tags:
      - user
      summary: Add a new receipe to the user's database.
      description: Add a new receipe to the user's database.
      operationId: addRecipeToDB
      requestBody:
        description: Receipe added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Receipe'
      responses:
        "201":
          description: receipe created successfully
        "400":
          description: "invalid input, object invalid"
    get:
      tags:
        - user
      summary: Get an internal receipe by ID
      description: Retrieve a specific internal receipe stored in the user's database.
      operationId: getRecipeFromDB
      parameters:
        - name: recipeId
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the internal recipe to retrieve
      responses:
        "200":
          description: Recipe retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipe'
        "400":
          description: Invalid recipe ID
        "404":
          description: Recipe not found

  /users/like:
      post:
        tags:
          - user
        summary: Like a recipe
        description: Add a like to a recipe by the logged-in user.
        operationId: likeRecipe
        requestBody:
          description: Recipe to like
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: integer
                    example: 12345
                required:
                  - recipeId
        responses:
          "200":
            description: Like added successfully
          "400":
            description: Invalid input
          "401":
            description: Unauthorized
        security:
          - cookieAuth: []
      delete:
        tags:
          - user
        summary: Unlike a recipe
        description: Remove a like from a recipe by the logged-in user.
        operationId: unlikeRecipe
        requestBody:
          description: Recipe to unlike
          required: true
          content:
            application/json:
              schema:
                type: object
                properties:
                  recipeId:
                    type: integer
                    example: 12345
                required:
                  - recipeId
        responses:
          "200":
            description: Like deleted successfully
          "400":
            description: Invalid input
          "401":
            description: Unauthorized
        security:
          - cookieAuth: []
  /users/getUserRecipes:
    get:
      tags:
        - user
      summary: Get user's recipes
      description: Retrieve the list of recipes for the logged-in user.
      operationId: getUserRecipes
      responses:
        "200":
          description: List of recipes retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipe'
        "400":
          description: Invalid user ID
        "404":
          description: User not found
  /recipes/like:
    get:
      tags:
        - receipe
      summary: Get number of likes for a recipe
      description: Retrieve the number of likes for a specific recipe.
      operationId: getRecipeLikes
      parameters:
        - name: recipeId
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the recipe
      responses:
        "200":
          description: Number of likes retrieved successfully
          content:
            application/json:
              schema:
                type: integer
                example: 42
        "400":
          description: Invalid recipe ID

  /users/userLikedRecipe:
    get:
      tags:
        - user
      summary: Check if user liked a recipe
      description: Check if the logged-in user has liked a specific recipe.
      operationId: isUserLikedRecipe
      parameters:
        - name: recipeId
          in: query
          required: true
          schema:
            type: integer
          description: The ID of the recipe
      responses:
        "200":
          description: Whether the user liked the recipe
          content:
            application/json:
              schema:
                type: boolean
                example: true
        "400":
          description: Invalid recipe ID
        "401":
          description: Unauthorized
      security:
        - cookieAuth: []

  /recipes/random:
    get:
      tags:
      - receipe
      summary: Get random recipes
      description: Get a random selection of recipes from the external API (Spoonacular)
      operationId: getRandomRecipes
      parameters:
      - name: number
        in: query
        description: Number of random recipes to return
        required: false
        schema:
          type: integer
          default: 3
          example: 3
      responses:
        "200":
          description: Random recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: internal server error
        "500":
          description: External API error or server error
  /recipes/searchById/{recipeId}:
    get:
      tags:
      - receipe
      summary: Get detailed recipe information
      description: Get comprehensive information about a specific recipe from external API (Spoonacular)
      operationId: getRecipeInformation
      parameters:
      - name: recipeId
        in: path
        description: The ID of the recipe to get information for
        required: true
        schema:
          type: integer
          example: 716429
      - name: includeNutrition
        in: query
        description: Whether to include nutrition information
        required: false
        schema:
          type: boolean
          default: false
          example: false
      responses:
        "200":
          description: Detailed recipe information retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Receipe'
        "400":
          description: Invalid recipe ID format
        "404":
          description: Recipe not found
        "500":
          description: External API error or server error
  /recipes/familyrecipes:
    get:
      tags:
        - receipe
      summary: Get user's family recipes
      description: Retrieve the list of family recipes for the logged-in user.
      operationId: getFamilyRecipes
      responses:
        "200":
          description: List of family recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array

  /users/addToViewRecipe:
    post:
      tags:
        - user
      summary: Record a user's recipe view
      description: Records the viewing of a recipe by a user and maintains only their 3 most recent viewed recipes.
      operationId: viewRecipe
      requestBody:
        description: Information about the viewed recipe
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  example: 642583
                internalRecipe:
                  type: boolean
                  example: true
              required:
                - recipeId
                - internalRecipe
      responses:
        "200":
          description: Recipe view recorded.
        "400":
          description: Invalid input, object invalid
        "500":
          description: Server error while recording recipe view
  /users/getLastViewedRecipes:
    get:
      tags:
        - user
      summary: Get the last 3 viewed recipes for a user
      description: Retrieve the last 3 viewed recipes for a user.
      operationId: getLastViewedRecipes
      responses:
        "200":
          description: Last 3 viewed recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: Unauthorized
  /users/favorites:
    post:
      tags:
        - user
      summary: Add a recipe to favorites
      description: Save a recipe to the logged-in user's list of favorite recipes.
      operationId: markAsFavorite
      requestBody:
        description: Recipe to add to favorites
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  example: 12345
                internalRecipe:
                  type: boolean
                  example: false
      responses:
        "200":
          description: The recipe was successfully saved as favorite
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
    get:
      tags:
        - user
      summary: Get user's favorite recipes
      description: Retrieve the list of favorite recipes for the logged-in user.
      operationId: getFavoriteRecipes
      responses:
        "200":
          description: List of favorite recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Receipe'
        "401":
          description: Unauthorized
    delete:
      tags:
        - user
      summary: Remove a recipe from favorites
      description: Remove a recipe from the logged-in user's list of favorite recipes.
      operationId: removeFavoriteRecipe
      requestBody:
        description: Recipe to remove from favorites
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  example: 12345
              required:
                - recipeId
      responses:
        "200":
          description: Recipe removed from favorites
        "400":
          description: Missing recipeId
        "401":
          description: Unauthorized
  /users/history:
    post:
      tags:
        - user
      summary: Add a recipe to user's view history
      description: Save a recipe to the logged-in user's view history.
      operationId: addToHistoryRecipes
      requestBody:
        description: Recipe to add to history
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipeId:
                  type: integer
                  example: 456
                internalRecipe:
                  type: boolean
                  example: true
      responses:
        "200":
          description: The recipe was successfully added to history
        "400":
          description: Invalid input
        "401":
          description: Unauthorized
        "500":
          description: Server error or database failure
    get:
      tags:
        - user
      summary: Get user's view history
      description: Retrieve the list of recipes viewed by the logged-in user.
      operationId: getHistoryRecipes
      responses:
        "200":
          description: List of viewed recipes retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    recipeId:
                      type: integer
                      example: 456
                    internalRecipe:
                      type: boolean
                      example: true
        "401":
          description: Unauthorized

  













# #need to be changed
#   /family_receipes:
#     get:
#       tags:
#       - receipe
#       - user
#       summary: Get family recipes.
#       description: Retrieve the list of family recipes shared within the community. Requires login (session).
#       operationId: getFamilyReceipes
#       responses:
#         "200":
#           description: List of family recipes retrieved successfully
#           content:
#             application/json:
#               schema:
#                 type: array
#                 items:
#                   $ref: '#/components/schemas/Receipe'
#         "401":
#           description: Unauthorized (missing or invalid session)
#       security:
#         - cookieAuth: []
#     post:
#       tags:
#       - receipe
#       summary: Add a new recipe to the family recipes.
#       description: Add a new family recipe. Requires login (session).
#       operationId: addFamilyReceipe
#       requestBody:
#         description: Family recipe to add
#         content:
#           application/json:
#             schema:
#               $ref: '#/components/schemas/Receipe'
#         required: true
#       responses:
#         "201":
#           description: Family recipe created successfully
#         "400":
#           description: "Invalid input, object invalid"
#         "401":
#           description: Unauthorized (missing or invalid session)
#       security:
#         - cookieAuth: []
# ##need to be changed     
#   /receipe/{id}/like:
#     post:
#       tags:
#       - receipe
#       - user
#       summary: Like a recipe.
#       description: Add a like to a recipe by a user.
#       operationId: likeReceipe
#       parameters:
#       - name: id
#         in: path
#         description: ID of the recipe to like
#         required: true
#         schema:
#           type: integer
#       responses:
#         "200":
#           description: Recipe liked successfully
#         "400":
#           description: Invalid recipe ID
#         "401":
#           description: Unauthorized (missing or invalid session)
#         "404":
#           description: Recipe not found
#       security:
#         - cookieAuth: []
#     delete:
#       tags:
#       - receipe
#       summary: Unlike a recipe.
#       description: Remove a like from a recipe by a user.
#       operationId: unlikeReceipe
#       parameters:
#       - name: id
#         in: path
#         description: ID of the recipe to unlike
#         required: true
#         schema:
#           type: integer
#       responses:
#         "200":
#           description: Recipe unliked successfully
#         "400":
#           description: Invalid recipe ID
#         "401":
#           description: Unauthorized (missing or invalid session)
#         "404":
#           description: Recipe not found
#       security:
#         - cookieAuth: []


components:
  schemas:
    Receipe:
      required:
      - summary
      - glutenFree
      - image
      - extendedIngredients
      - analyzedInstructions
      - title
      - readyInMinutes
      - servings
      - vegan
      - sourceName
      - vegetarian
      type: object
      properties:
        id:
          type: integer
          example: 10
        title:
          type: string
          example: Spaghetti Bolognese
        image:
          type: string
          format: URL
          example: https://example.com/images/spaghetti.jpg
        readyInMinutes:
          type: integer
          example: 30
        servings:
          type: integer
          example: 4
        vegetarian:
          type: boolean
          example: false
        vegan:
          type: boolean
          example: false
        glutenFree:
          type: string
          example: false
        summary:
          type: string
          example: A classic Italian pasta dish with a rich meat sauce.
        extendedIngredients:
          type: array
          description: Detailed list of ingredients with metadata, quantities, and units
          items:
            type: object
            properties:
              id:
                type: integer
                example: 12061
              aisle:
                type: string
                example: "Nuts"
              image:
                type: string
                example: "almonds.jpg"
              consistency:
                type: string
                example: "SOLID"
              name:
                type: string
                example: "almond cookies"
              nameClean:
                type: string
                example: "almond cookies"
              original:
                type: string
                example: "150 grams Almond cookies, crumbed"
              originalName:
                type: string
                example: "Almond cookies, crumbed"
              amount:
                type: number
                example: 150.0
              unit:
                type: string
                example: "grams"
              meta:
                type: array
                items:
                  type: string
                example: []
              measures:
                type: object
                properties:
                  us:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 5.291
                      unitShort:
                        type: string
                        example: "oz"
                      unitLong:
                        type: string
                        example: "ounces"
                  metric:
                    type: object
                    properties:
                      amount:
                        type: number
                        example: 150.0
                      unitShort:
                        type: string
                        example: "g"
                      unitLong:
                        type: string
                        example: "grams"
        analyzedInstructions:
          type: array
          description: "Structured step-by-step preparation instructions"
          items:
            type: object
            properties:
              name:
                type: string
              steps:
                type: array
                items:
                  type: object
                  properties:
                    number:
                      type: integer
                    step:
                      type: string
                    ingredients:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          localizedName:
                            type: string
                          image:
                            type: string
                    equipment:
                      type: array
                      items:
                        type: object
                        properties:
                          id:
                            type: integer
                          name:
                            type: string
                          localizedName:
                            type: string
                          image:
                            type: string
                          temperature:
                            type: object
                            properties:
                              number:
                                type: number
                              unit:
                                type: string
                    length:
                      type: object
                      properties:
                        number:
                          type: integer
                        unit:
                          type: string
          example:
            - name: ""
              steps:
                - number: 1
                  step: "Toss the cookie crumbs into the melted butter..."
                  ingredients:
                    - id: 10018192
                      name: "cookie crumbs"
                      localizedName: "cookie crumbs"
                      image: ""
                    - id: 1001
                      name: "butter"
                      localizedName: "butter"
                      image: "butter-sliced.jpg"
                  equipment:
                    - id: 404628
                      name: "hand mixer"
                      localizedName: "hand mixer"
                      image: "https://spoonacular.com/cdn/equipment_100x100/hand-mixer.png"
        sourceName:
          type: string
          description: The user who created or added the recipe to the family collection.
          example: user101
        popularity:
          type: integer
          description: The number of likes the recipe has
          example: 100
    User:
      type: object
      required:
        - country
        - email
        - firstname
        - lastname
        - password
        - username
      properties:
        user_id:
          type: integer
          readOnly: true
          example: 101
        username:
          type: string
          example: Acef_
        firstname:
          type: string
          example: Asaf
        lastname:
          type: string
          example: Baroch
        email:
          type: string
          format: email
          example: asaf@example.com
        password:
          type: string
          format: password
          example: "123"
        country:
          type: string
          example: Israel

    fav_receipes_body:
      required:
      - recipeId
      type: object
      properties:
        recipeId:
          type: string
          description: The ID of the recipe to add to favorites
          example: "10"
    LoginScheme:
      required:
      - email
      - password
      type: object
      properties:
        username:
          type: string
          example: Acef_
        password:
          type: string
          format: password
          example: "123"
  securitySchemes:
    cookieAuth:
      type: apiKey
      in: cookie
      name: session